rows (The number of rows in the student's answer): len(studentAnswer)

cols (The number of columns in the student's answer): if(rows>0,len(studentAnswer[0]),0)

correct_rows (The number of rows in the correct answer): len(settings['correctAnswer'])

correct_cols (The number of columns in the correct answer): len(settings['correctAnswer'][0])

num_cells (The number of cells in the student's answer): rows*cols

cell_indexes (The index of each cell in the student's answer): 
    product(list(0..rows-1), list(0..cols-1))

student_cell_precisions (Precision the student used in each cell):
    switch(
        settings["precisionType"]="dp",
            map(map(countdp(cell),cell,row), row, studentAnswer)
        ,
        settings["precisionType"]="sigfig",
            map(map(countsigfigs(cell),cell,row), row, studentAnswer)
        ,
        map(map(0,cell,row),row,studentAnswer)
    )

all_same_precision:
    if(len(student_cell_precisions)=0 or all(map(all(map(togivenprecision(c,settings["precisionType"],student_cell_precisions[0][0],settings["strictPrecision"]),c,row)),row,studentAnswer)),
        true
    ,
        feedback(translate("part.matrix.not all cells same precision"));
        false
    )

studentPrecision (Maximum precision student used, or the required precision, whichever's higher):
    max(settings["precision"], max(map(max(row),row,student_cell_precisions)))

allowFractions: settings["allowFractions"]

allowedNotationStyles: ["plain","en","si-en"]

studentNumbers:
    if(settings["allowFractions"],
        map(map(parsenumber_or_fraction(c, allowedNotationStyles), c, row), row, studentAnswer)
    ,
        map(map(parsenumber(c, allowedNotationStyles), c, row), row, studentAnswer)
    )

studentMatrix (The student's answer, with each cell parsed to numbers): 
    matrix(studentNumbers)

empty_cells (The positions of the cells in the student's answer which have been left empty):
  filter(trim(studentAnswer[p[0]][p[1]])="", p, cell_indexes)

any_empty (Are any of the cells empty?):
  assert(len(empty_cells)=0,
    warn(translate("part.matrix.empty cell"));
    fail(translate("part.matrix.empty cell"));
    true
  )

invalid_cells (The positions of the cells in the student's answer which can't be interpreted as numbers):
    filter(isnan(studentNumbers[p[0]][p[1]]), p, cell_indexes)

any_invalid (Are any of the cells invalid?):
    assert(len(invalid_cells)=0,
        warn(translate("part.matrix.invalid cell"));
        fail(translate("part.matrix.invalid cell"));
        true
    )

wrong_precision_cells (The indexes of the cells which are given to the wrong precision):
    filter(not togivenprecision(studentAnswer[p[0]][p[1]], settings["precisionType"], settings["precision"], settings["strictPrecision"]), p, cell_indexes)

wrong_precision (Has every cell been given to the correct precision?):
    assert(len(wrong_precision_cells)=0,
        multiply_credit(settings['precisionPC'], settings["precisionMessage"])
    )

wrong_size (Does the student's answer have the wrong dimensions?):
    assert(rows=correct_rows and cols=correct_cols,
        incorrect();
        end()
    )

rounded_student_matrix (The student's answer, with each cell rounded to studentPrecision): 
    map(
        switch(
            settings["precisionType"]="dp",
            precround(c, studentPrecision),
            settings["precisionType"]="sigfig",
            siground(c, studentPrecision),
            c
        ),
        c,
        studentMatrix
    )

rounded_correct_matrix:
    map(
        map(
            switch(
                settings["precisionType"]="dp",
                precround(c, studentPrecision),
                settings["precisionType"]="sigfig",
                siground(c, studentPrecision),
                c
            ),
            c,
            row
        ),
        row,
        settings["correctAnswer"]
    )

correct_cells (The indexes of the cells which are correct):
    filter(
        if(p[0]<correct_rows and p[1]<correct_cols,
            withintolerance(rounded_student_matrix[p[0]][p[1]], rounded_correct_matrix[p[0]][p[1]], settings['tolerance']),
            false
        ),
        p, 
        cell_indexes
    )

mark:
    apply(any_empty);
    apply(any_invalid);
    assert(settings["precisionType"]="none" and not settings["allowFractions"], apply(all_same_precision));
    apply(wrong_size);
    if(len(correct_cells)=len(cell_indexes),
        correct()
    ,
        if(settings['markPerCell'],
            set_credit(len(correct_cells)/num_cells,translate('part.matrix.some incorrect',["count":num_cells-len(correct_cells)]))
        ,
            incorrect();
            end()
        )
    );
    apply(wrong_precision)

interpreted_answer (The student's answer, to be reused by other parts):
    apply(any_empty);
    apply(any_invalid);
    studentMatrix
