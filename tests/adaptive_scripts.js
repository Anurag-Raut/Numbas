Numbas.queueScript('adaptive_scripts',['adaptive','marking'],function() {
    Numbas.adaptive_scripts = {
        "diagnosys": 
"state:\n    [\n        \"topics\": map(\n            [\n                \"topic\": topic,\n                \"status\": \"unknown\" // \"unknown\", \"passed\", or \"failed\"\n            ],\n            topic,\n            topics_with_questions\n        )\n    ]\n\ntopic_questions:\n    dict(map(\n        [topic[\"name\"], filter(topic[\"name\"] in q[\"topics\"], q, questions)],\n        topic,\n        values(topics)\n    ))\n\ntopics_with_questions:\n    filter(len(topic_questions[topic[\"name\"]])>0,topic,values(topics))\n\ntopics_by_objective:\n    dict(map(\n        let(\n            ltopics, topics_with_questions,\n            indices, filter(lo[\"name\"] in ltopics[j][\"learning_objectives\"], j, 0..len(ltopics)-1),\n            [lo[\"name\"],indices]\n        ),\n        lo,\n        learning_objectives\n    ))\n\nunknown_topics (Which topics are still unknown?): \n    filter(x[\"status\"]=\"unknown\",x,state[\"topics\"])\n\nmiddle_topic:\n    let(\n        n, len(unknown_topics),\n        if(n>0,\n            random(unknown_topics)[\"topic\"][\"name\"]\n        ,\n            nothing\n        )\n    )\n\nget_dependents:\n    expression(\"\"\"\n        [target] + flatten(map(eval(get_dependents,[\"target\":t,\"correct\":correct]),t,topics[target][if(correct,\"leads_to\",\"depends_on\")]))\n    \"\"\")\n\nset_state (Procedure to mark a topic, and everything it leads to, as failed):\n    expression(\"\"\"\n        let(\n            nstate, \n                state + ['topics': map(\n                    if(tstate[\"topic\"]=topics[target], tstate + [\"status\":if(correct,\"passed\",\"failed\")], tstate),\n                    tstate,\n                    state[\"topics\"]\n                )],\n            others, topics[target][if(correct,\"leads_to\",\"depends_on\")],\n            foldl(\n                eval(set_state,[\"state\":s,\"target\":t,\"correct\":correct]),\n                s,\n                t,\n                nstate,\n                others\n            )\n        )\n    \"\"\")\n\nafter_answering (Update the state after the student answers a question):\n    let(\n        correct, current_question[\"credit\"]=1,\n        nstate, \n            foldl(\n                let(\n                    ntopics, eval(get_dependents,[\"target\":t,\"correct\":correct]),\n                    state + ['topics': map(\n                        if(tstate[\"topic\"][\"name\"] in ntopics, tstate + [\"status\":if(correct,\"passed\",\"failed\")], tstate),\n                        tstate,\n                        state[\"topics\"]\n                    )]\n                ),\n                s,\n                t,\n                state,\n                current_question[\"topics\"]\n            ),\n        [\n            \"state\": nstate,\n            \"action\": \"move on\"\n        ]\n    )\n\nnext_question (The next question to show to the student):\n    // Randomly pick a question on the middle unknown topic\n    let(\n        qs, filter(middle_topic in q[\"topics\"], q, questions),\n        if(len(qs)>0,random(qs),nothing)\n    )\n\nprogress (Progress on each of the learning objectives):\n    map(\n        let(\n            tstates, map(state[\"topics\"][j],j,topics_by_objective[lo[\"name\"]]),\n            known, filter(tstate[\"status\"]<>\"unknown\",tstate,tstates),\n            passed, filter(tstate[\"status\"]=\"passed\",tstate,known),\n            num_topics, len(tstates),\n            num_known, len(known),\n            num_passed, len(passed),\n            [\"name\": lo[\"name\"], \"progress\": if(num_topics>0,num_known/num_topics,0), \"credit\": if(num_known>0,num_passed/num_known,0)]\n        ),\n        lo,\n        learning_objectives\n    )\n    +\n    let(\n        num_topics, len(state[\"topics\"]),\n        known, filter(tstate[\"status\"]<>\"unknown\",tstate,state[\"topics\"]),\n        passed, filter(tstate[\"status\"]=\"passed\",tstate,known),\n        num_known, len(known),\n        num_passed, len(passed),\n        [\n            \"name\": \"Total\",\n            \"progress\": if(num_topics>0,num_known/num_topics,0), \n            \"credit\": if(num_known>0,num_passed/num_topics,0)\n        ]\n    )\n"
	};
	for(var x in Numbas.adaptive_scripts) {
		Numbas.adaptive_scripts[x] = new Numbas.adaptive.AdaptiveScript(Numbas.adaptive_scripts[x]);
	}
});
